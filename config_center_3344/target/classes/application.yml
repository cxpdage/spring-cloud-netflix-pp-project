server:
  port: 3344 #端口号

spring:
  application:
    name: config-center #服务名
  cloud:
    config:
      server:
        git:
          #https://blog.csdn.net/qq_39130650/article/details/87871569?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-87871569-blog-123561765.235^v27^pc_relevant_landingrelevant&spm=1001.2101.3001.4242.1&utm_relevant_index=3
          #git的使用：https://blog.csdn.net/qq_48802092/article/details/126068986

          # Git（https://github.com/） 地址，https://gitee.com/java-mohan/springcloud-config.git
          # 码云（gitee）(https://gitee.com/)地址 uri: https://github.com/javmohan/springcloud-config.git  (github 站点访问较慢，因此这里我们使用 gitee)

#          uri: https://github.com/cxpdage/springcloud-config.git
          uri: https://gitee.com/dageAndxiaoge/springcloud-config.git
          #仓库名
          search-paths:
            - springcloud-config
          force-pull: true
          # 如果Git仓库为公开仓库，可以不填写用户名和密码，如果是私有仓库需要填写
          # username: ********
          # password: ********

          username: dageAndxiaoge
          password: cxp20140213020
      #分支名
      label: master

#    RabbitMQ 为例，来演示如何使用 Config+Bus 实现配置的动态刷新 start
    ##### RabbitMQ 相关配置，15672 是web 管理界面的端口，5672 是 MQ 的访问端口###########
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
# Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 heath 节点，本段配置（*）就是为了开启所有的节点
management:
  endpoints:
    web:
      exposure:
        include: 'bus-refresh'
#    RabbitMQ 为例，来演示如何使用 Config+Bus 实现配置的动态刷新 end

eureka:
  client: #将客户端注册到 eureka 服务列表内
    service-url:
      defaultZone: http://eureka7001:7001/eureka/,http://eureka7002:7002/eureka/,http://eureka7003:7003/eureka/  #将服务注册到 Eureka 集群

#放到git上的文件测试：
  #http://localhost:3344/master/config-dev.yml
  #http://localhost:3344/config-dev.yml
  #http://localhost:3344/config/dev/master

